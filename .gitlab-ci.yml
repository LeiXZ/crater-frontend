# Copyright 2025 RAIDS Lab
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

stages:
  - build_frontend
  - build_image
  - deploy

variables:
  HUSKY: '0' # avoid installing Git Hooks on CI servers
  HARBOR_REGISTRY_IMAGE: '${HARBOR_REGISTRY}/crater/web-frontend'

# Build frontend and generate artifacts for main branch
build_frontend_main:
  stage: build_frontend
  image: harbor.act.buaa.edu.cn/crater/node-pnpm:21
  script:
    - sed -i "s/VITE_APP_VERSION=\".*\"/VITE_APP_VERSION=\"${CI_COMMIT_SHORT_SHA}\"/" .env
    - pnpm config set store-dir .pnpm-store
    - pnpm config set registry https://registry.npmmirror.com
    - pnpm install
    - pnpm build
  only:
    - main
  cache:
    key: 'crater-web-frontend'
    paths:
      - .pnpm-store/
      - node_modules/
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Build Docker image and push to harbor registry for main branch
build_image_main:
  stage: build_image
  image:
    name: harbor.act.buaa.edu.cn/crater/kaniko-executor:debug
    entrypoint: ['']
  script:
    # Since GitLab container registry is not enabled, we need to set up harbor registry manually.
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${HARBOR_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${HARBOR_REGISTRY_USER}" "${HARBOR_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  only:
    - main
  dependencies:
    - build_frontend_main

# Deploy to Kubernetes cluster for testing branch
deploy_testing:
  stage: deploy
  image:
    name: harbor.act.buaa.edu.cn/crater/bitnami-kubectl:240302
    entrypoint: ['']
  script:
    - kubectl config use-context raids/resource-scheduling/crater/web-frontend:crater-cluster
    - kubectl set image deployment/crater-web-frontend crater-web-frontend-container=${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} -n crater
  only:
    - main
  dependencies:
    - build_image_main

# Deploy to Kubernetes cluster for main branch
deploy_main:
  stage: deploy
  image:
    name: harbor.act.buaa.edu.cn/crater/bitnami-kubectl:240302
    entrypoint: ['']
  script:
    - kubectl config use-context raids/resource-scheduling/crater/web-frontend:actgpu-cluster
    - kubectl set image deployment/crater-web-frontend crater-web-frontend-container=${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} -n crater
  only:
    - main
  dependencies:
    - build_image_main
